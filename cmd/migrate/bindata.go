// Code generated by go-bindata.
// sources:
// mysql/migrations/20150715080601-create-schema.sql
// sqlite3/migrations/20150715080601-create-schema.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _mysqlMigrations20150715080601CreateSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\x4d\x73\xea\x36\x14\xdd\xf3\x2b\xb4\x0b\x4c\x9b\x19\xd2\x24\x33\x6d\x33\x59\x10\x70\x52\xa6\xc4\xa4\x8e\x59\x64\x25\x0b\x5b\x80\x26\x58\x72\x65\x99\x84\x7f\x5f\x59\xe0\x0f\xd9\xd8\x38\xa6\xef\x4d\x78\xc3\xe6\xf9\x9d\xfb\xa1\x73\xcf\xbd\x57\x7a\x97\x97\xe0\x17\x9f\x2c\x39\x12\x18\xcc\x82\xce\xd0\x32\x06\xb6\x01\xec\xc1\xc3\xc4\x00\x4e\x14\x62\x1e\x3a\xa0\xdb\x01\xc0\x21\x9e\x03\x08\x15\xdd\xab\x7e\x0f\x44\x34\x24\x4b\x8a\x3d\x60\x4e\x6d\x60\xce\x26\x13\x30\x98\xd9\x53\x38\x36\xa5\xf9\xb3\x61\xda\xbf\xc6\x06\xb1\x31\x45\x3e\x76\xc0\x06\x71\x77\x85\x78\xf7\xea\x8f\xab\x5e\x6a\xa2\x30\xd8\x47\x64\x9d\x01\xae\xfb\xd2\xf9\xc8\x78\x1c\xcc\x26\x39\x50\x80\xc2\xf0\x83\x71\x2f\xc3\xdd\xc6\x38\xcd\x91\xcf\x3c\x2c\xcf\xc0\xb8\x03\x04\xa1\x5b\x95\x68\x01\xc2\xb1\x8f\xfd\x39\xe6\x50\xb0\x77\x4c\x0b\xce\x4a\x41\x5d\x8e\x25\x25\x1e\x44\x22\xf6\xe8\xe3\x50\x20\x3f\xc8\xce\x9b\xe0\x2f\xfa\xf2\xcf\xa5\xfa\x81\x7e\xff\x4f\xf5\xbb\xd8\x1d\x3f\xf0\x4e\x72\xf0\x62\x8d\x9f\x07\xd6\x1b\xf8\xdb\x78\x03\xdd\x98\xfd\x5e\xfc\x75\x66\x8e\xff\x99\x19\xea\xe3\xae\x3a\x30\xa1\x19\x46\x94\xfc\x1b\x49\xb6\xbb\x19\xf3\xbd\x4e\x0f\x18\xe6\xd3\xd8\x34\xee\xc7\x94\xb2\xd1\x43\x1a\x76\xf8\xd7\xc0\x7a\x35\xec\xfb\x48\x2c\x7e\xbf\xeb\x14\xca\x2e\x30\xf2\x5b\x97\xfd\x58\xc9\x91\xeb\xe2\x30\x84\xef\x78\x5b\x57\xcf\x33\xa0\x5f\xb1\x04\x0b\xd4\x9f\x4a\xbb\x2a\x67\x5b\xea\x95\x83\x5a\xab\xb4\x31\x1b\xc0\x38\x5b\xe7\x0a\xf9\xdb\xed\xed\x79\x94\x28\xad\x8d\xa2\x12\xee\x39\x81\x0b\xc6\xb1\x3c\x64\x5c\xa3\x84\xa6\x43\xf0\x3d\x37\x79\x78\x42\x97\x82\x0f\xa7\xe6\xab\x6d\x0d\xc6\xa6\x5d\x1b\xe4\x71\x6a\x19\xe3\x27\x73\x9f\x5a\x1a\x10\x58\xc6\xa3\x61\x19\xe6\xd0\x78\xcd\xba\xcc\xa9\xf7\x5d\xca\x48\xf7\x9d\x66\xa7\xf9\x4e\x06\xb7\xf2\xdd\x4e\x8d\xc4\xc3\x54\x90\x05\x39\x61\x03\x78\xcc\x0d\xb1\x80\xfa\x44\xb8\xbe\x29\xf6\xfa\x1e\xb6\x20\x6b\xdc\x10\x1a\xac\x91\x90\x7c\xf8\x0d\xa0\xf3\x88\x7a\xeb\x26\x3e\x37\xf2\xa0\x84\xd1\x3a\x64\x80\x96\x18\x06\x48\xac\x1c\xb0\x66\x74\x29\xf0\xa7\x38\x00\x10\x44\xd4\x07\x5c\x09\xc1\x91\xfb\x0e\x43\x16\x71\x17\x57\xf9\x9a\x23\x2a\xf9\x85\x0b\xce\x7c\x18\x44\xf3\x35\x71\xab\x57\xdb\x37\x6c\xc5\x76\xa2\x93\x92\xe3\x04\xb7\x16\xdc\x51\xea\xe7\xcc\xdb\x56\x12\x2e\xff\x0d\x72\x4c\xe5\x45\x02\x7b\x55\x20\xb1\x0d\x6a\x87\x62\xd6\x35\x0d\x26\x2c\xa2\xee\x2a\xbe\xb1\xa4\xee\xfa\xa5\x3d\xd8\x70\x56\x1f\x13\x88\xbc\xfb\xb0\x4d\x53\x35\x85\xae\x1c\x35\xfb\x88\x67\xa0\xb4\x74\x8a\xef\xc5\x03\xb5\x1a\xe4\x27\xb9\x5e\x9c\xb2\xe1\x57\x86\xff\x91\x60\xfa\x90\x2e\x04\xd6\x46\xb5\x3e\x67\x0f\x2e\x83\xca\xfc\x7e\xd2\x2a\x88\xe3\x6f\xd5\x92\x6b\xdb\x98\x3b\x0f\xc7\x75\xdc\xf0\x06\xa3\xc9\x79\x97\xd7\x19\x8d\x46\x4d\x77\x3b\x5e\x61\x42\x50\x5e\x7b\x29\x69\x07\x2d\x8e\x5d\x6c\x8a\x02\xaa\x0c\xa4\x8b\x28\x0b\xaa\xa9\x28\x1b\xcc\x95\x0a\xad\xca\xeb\xcb\x77\xa1\x76\x22\x4d\x5e\x89\x72\x84\xfb\x24\x1e\xe2\xc9\x16\x29\xbc\x31\xcb\x2f\x92\xc2\x7b\xb0\x0c\x38\x55\x43\xaa\x74\xe5\xfc\xa0\xca\x0c\xc6\x7f\xf9\x54\xf5\x56\x89\xf6\xea\x2c\x54\xaa\x99\xc5\x2e\xf3\x96\x84\x6d\x98\x38\x61\xd3\xaa\x3d\x98\x34\xdd\x4d\xf1\x59\xdf\xb0\xdd\x1b\x6e\xb7\xef\xdc\xc3\x8a\xc5\xa6\xed\xbb\x03\x7f\x65\xcd\x54\xb9\xff\x3f\x9a\xb6\x22\x9b\x1f\xb6\x54\xf2\xff\xd5\x34\x62\x1f\xb4\x33\xb2\xa6\x2f\x7b\x35\xaa\x5c\xee\xf2\x5f\xd2\x17\x90\xf6\x35\x1b\x34\x25\xb0\x6e\x9e\x5b\xab\x25\x07\xa4\x10\x4a\x9d\xe6\xae\xf3\x5f\x00\x00\x00\xff\xff\xac\x46\xb6\xf5\x0b\x13\x00\x00")

func mysqlMigrations20150715080601CreateSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_mysqlMigrations20150715080601CreateSchemaSql,
		"mysql/migrations/20150715080601-create-schema.sql",
	)
}

func mysqlMigrations20150715080601CreateSchemaSql() (*asset, error) {
	bytes, err := mysqlMigrations20150715080601CreateSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "mysql/migrations/20150715080601-create-schema.sql", size: 4875, mode: os.FileMode(420), modTime: time.Unix(1437729610, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _sqlite3Migrations20150715080601CreateSchemaSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdf\x4f\xe3\x38\x10\x7e\xef\x5f\x61\xe5\x85\x56\x77\x48\xe5\xa0\x0f\x77\x7d\xea\xd1\x80\xd0\x56\xe9\xaa\x14\x69\xf7\xc9\x72\x13\xb7\xb5\x48\xec\xac\xe3\x16\xfa\xdf\x6f\xec\xfc\x74\x12\x27\x61\x01\x51\xa9\x8a\x84\x33\xf9\x66\xe6\x9b\xf1\x37\x36\x97\x97\xe0\xaf\x80\xec\x38\x12\x18\x3c\x85\x83\xdb\x95\x3d\x5b\xdb\x60\x3d\xfb\x7f\x61\x03\x0b\x53\xc1\x09\x8e\x2c\x30\x1c\x00\x60\x11\xcf\x02\x0f\xce\xda\xbe\xb7\x57\x20\xe4\x24\x40\xfc\x04\x9e\xf1\xe9\x6f\xf9\x4e\x10\xe1\x63\x0b\x1c\x11\x77\xf7\x88\x0f\xaf\x6f\xc6\x23\xe0\x2c\xd7\xc0\x79\x5a\x2c\x94\xc1\x86\x79\x27\x0b\xf8\x8c\xee\x04\x7e\x15\xf5\x77\x90\x63\xea\x61\x8e\x3d\x93\x91\x38\x85\x25\x07\xff\x4c\x26\x15\x07\xc4\x8b\xa3\x25\x5b\x82\x39\x94\x81\x12\x2a\x86\x57\x71\x10\xba\x11\xa2\xee\x9e\xf1\x12\xcc\x78\x5c\x0d\xf4\x10\xb5\x22\x84\x87\x8d\x4f\x5c\x0b\x08\x42\x4f\xca\xa2\xf8\x1c\x78\x78\x8b\x0e\xbe\x00\x5b\xe4\x47\x58\x59\x73\x1c\xb0\x23\xf6\xe0\x96\xb3\x00\xbe\xed\xd3\xc8\x65\x1c\xa7\x51\x5c\x55\x62\x74\x39\x8e\xeb\xe5\x41\x24\x24\x5a\x80\x23\x81\x82\xb0\x00\x9b\xdb\x77\xb3\xa7\xc5\x1a\x5c\xc4\xd9\x8d\x2f\xd5\x0f\x8c\xc7\xff\xa9\xdf\x45\x92\x64\xe8\xbd\x0b\xe0\x76\xe9\x3c\xae\x57\xb3\xb8\x1b\xf2\x26\x81\x5a\x01\xe0\x36\x8e\x9e\xec\xa8\x05\xee\x96\x2b\xfb\xe1\xde\x01\xdf\xec\x9f\x60\x58\xa9\xd2\x08\xac\xec\x3b\x7b\x65\x3b\xb7\xf6\x63\xb9\x82\xb2\xe3\x64\xbb\x8d\x4c\xbe\xd2\x22\x99\xbc\x64\x35\xd4\xf1\xe5\x6a\x8e\x3c\x18\x4d\x07\x0d\xdd\x7e\x82\x02\xa3\xa0\x47\xc3\x27\xc6\xe6\x3e\x91\x30\x2d\xaf\xb5\xc6\x48\x5c\xf6\x6b\x8b\xb3\x2b\x7d\xc2\x18\xcc\xf8\x30\x95\x24\xe7\x4b\xaf\x49\xa1\x30\xc6\x7a\xa7\x0e\x52\x42\x4d\xf8\x19\xdf\x3a\xbc\x5c\x6d\x2b\xb9\xde\x72\x5d\x35\xf7\x98\x1b\x61\x01\x29\x0a\x5a\xa5\x2e\x35\xdb\x12\x1f\xf7\x34\x0d\x7d\x24\xe2\xbc\x82\x1e\xa6\x9b\x03\xf5\xda\x95\x36\x35\x3c\xc6\x39\x11\x46\xdb\x2c\x43\xb4\xc3\x30\x44\x62\x6f\xd2\x5c\x65\xd0\x29\xed\x7b\x21\x38\x72\x9f\x61\xc4\x0e\xdc\xc5\x46\x91\x47\x94\xf6\x50\xc2\xaf\x6f\xf2\x86\x36\x09\x51\x14\xbd\x30\xee\xc5\x43\x2a\x20\x72\x4c\x65\xdd\x82\x03\x44\xfc\x82\x9b\xab\x7f\xab\x99\x08\xf6\x8c\x69\x9b\xc1\x7b\x52\x6d\x88\x54\x6d\x03\x29\x74\x7d\x66\x76\xbb\x44\x75\x0c\x42\xce\xfc\xd6\x79\x7c\x56\x42\x95\xd3\xf2\x01\x32\x62\xc6\xfe\x94\xa9\x94\xf9\xee\xaa\xa6\x2e\x35\xf5\x46\x43\xae\x8b\xa3\x08\xc6\xe6\x85\xd5\xa4\x7c\xfa\x29\x18\xbd\xf8\xfa\x02\x36\x10\x91\x11\xd5\x42\x04\xc8\x1b\xb7\x8b\x8d\xca\xc6\xbd\x96\x44\x64\x01\x95\xe4\x2f\xd9\xf6\x06\xc2\x94\x4d\xc0\x62\x39\x40\x42\x1e\x2a\x9b\x06\x78\x86\xa9\x1d\x09\x71\xb0\x91\x9d\xa8\x4b\xc3\xa4\x31\x84\x73\x2b\xc2\x91\x89\x7e\xf7\x01\x75\x5a\xcf\x18\xb9\xa9\xb2\xdf\x71\x78\xea\x90\x9e\xb3\x92\x16\xc5\xc8\x27\x1d\x7f\x12\xec\x8f\x95\x95\x07\x67\x6e\xff\xc8\xa0\x4d\xc1\x2f\x9d\xa2\xd4\xa5\xd8\xa7\x2d\x20\xb5\x28\x35\x8c\x3c\xc8\x2a\x44\x7d\xb4\xc2\x86\x25\xb5\x5d\xa1\xfc\xe3\x35\x01\x6e\x9c\xc8\xe9\xae\xfe\x43\x1f\x6a\x3f\x76\xfb\x48\xb6\x6d\xcd\x87\xe2\x1b\x16\x4f\x29\x40\xf0\x40\xc9\xaf\x03\x4e\xd0\xf2\x82\xe4\xf2\x54\xc3\xc8\x6e\x37\x1d\x37\x2a\x89\xa6\x35\x8e\x76\xa5\xea\x02\x6d\xac\x53\x09\xce\x58\x29\x35\x88\x60\xf2\xac\x65\x97\x4f\x48\x73\x66\xda\x45\xc1\x70\x67\xc8\x62\xc9\xaf\x61\x2d\xcd\xd7\x8c\x59\x9b\xef\x75\xc8\x7c\xc6\x37\x65\x58\x3a\x25\x34\x9f\x17\xb2\x6c\xb3\x53\xd6\xdb\xe0\x1a\xd9\xd7\xe0\x4a\xfc\x97\xff\x37\x33\x67\x2f\x74\x30\x98\xaf\x96\xdf\x53\x29\x56\x5b\x6b\x5a\x5e\xc9\x61\xb4\xd5\x22\xf7\x9a\xb1\xfe\x79\xe9\x2e\x54\x03\x20\x15\x57\xaa\x99\xa7\x83\xdf\x01\x00\x00\xff\xff\x49\xe1\x62\x8a\x3d\x12\x00\x00")

func sqlite3Migrations20150715080601CreateSchemaSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlite3Migrations20150715080601CreateSchemaSql,
		"sqlite3/migrations/20150715080601-create-schema.sql",
	)
}

func sqlite3Migrations20150715080601CreateSchemaSql() (*asset, error) {
	bytes, err := sqlite3Migrations20150715080601CreateSchemaSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sqlite3/migrations/20150715080601-create-schema.sql", size: 4669, mode: os.FileMode(420), modTime: time.Unix(1437599402, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"mysql/migrations/20150715080601-create-schema.sql": mysqlMigrations20150715080601CreateSchemaSql,
	"sqlite3/migrations/20150715080601-create-schema.sql": sqlite3Migrations20150715080601CreateSchemaSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"mysql": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"20150715080601-create-schema.sql": &bintree{mysqlMigrations20150715080601CreateSchemaSql, map[string]*bintree{
			}},
		}},
	}},
	"sqlite3": &bintree{nil, map[string]*bintree{
		"migrations": &bintree{nil, map[string]*bintree{
			"20150715080601-create-schema.sql": &bintree{sqlite3Migrations20150715080601CreateSchemaSql, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

